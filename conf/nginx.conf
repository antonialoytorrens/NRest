server {
    server_name @SERVER_NAME@;
    
    listen 443 ssl;
    
    # SSL Certificates
    ssl_certificate /etc/letsencrypt/live/@SERVER_NAME@/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/@SERVER_NAME@/privkey.pem; # managed by Certbot

    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    
    # OCSP Stapling
    # ssl_stapling on;
    # ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/@SERVER_NAME@/chain.pem;
    
    # DNS Resolver for OCSP
    # Options: 127.0.0.1, 1.1.1.1, 8.8.8.8, or your local resolver
    # resolver 1.1.1.1 8.8.8.8 valid=300s;
    # resolver_timeout 5s;
    
    # Security Headers
    # HSTS (2 years = 63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # Additional recommended security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    location / {
        # Preflighted requests
        if ($request_method = OPTIONS ) {
            add_header 'Access-Control-Allow-Origin' '@N8N_SERVER_NAME@' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS, HEAD' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept, n8n-version' always;
            # Include security headers in OPTIONS responses
            add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            return 200;
        }

        # Restrict PUT and PATCH outside localhost
        if ($request_method ~* '(GET|HEAD)') {
            add_header 'Access-Control-Allow-Origin' '@N8N_SERVER_NAME@' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            # Security headers for GET/HEAD requests
            add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        }
        
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_buffering off;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name @SERVER_NAME@;
    
    # Always redirect to HTTPS
    return 301 https://$server_name$request_uri;
}